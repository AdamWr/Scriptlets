{"version":3,"file":"ScriptletsCjs.js","sources":["../../src/scriptlets/scriptlets.js"],"sourcesContent":["import {\n    attachDependencies,\n    addCall,\n    passSourceAndProps,\n    wrapInNonameFunc,\n} from '../helpers/injector';\n\nimport {\n    isAdgScriptletRule,\n    isUboScriptletRule,\n    isAbpSnippetRule,\n} from '../helpers/validator';\n\nimport {\n    convertUboScriptletToAdg,\n    convertAbpSnippetToAdg,\n    convertScriptletToAdg,\n    convertAdgScriptletToUbo,\n} from '../helpers/converter';\n\nimport { parseRule } from '../helpers/parse-rule';\n\nimport * as scriptletsList from './scriptletsList';\n\n/**\n * @typedef {Object} Source - scriptlet properties\n * @property {string} name Scriptlet name\n * @property {Array<string>} args Arguments for scriptlet function\n * @property {'extension'|'corelibs'} engine Defines the final form of scriptlet string presentation\n * @property {string} [version]\n * @property {boolean} [verbose] flag to enable printing to console debug information\n * @property {string} [ruleText] Source rule text is used for debugging purposes\n */\n\n\n/**\n * Find scriptlet by it's name\n * @param {string} name\n */\nfunction getScriptletByName(name) {\n    const scriptlets = Object.keys(scriptletsList).map((key) => scriptletsList[key]);\n    return scriptlets\n        .find((s) => s.names && s.names.indexOf(name) > -1);\n}\n\n/**\n * Checks if the scriptlet name is valid\n * @param {string} name - Scriptlet name\n */\nfunction isValidScriptletName(name) {\n    if (!name) {\n        return false;\n    }\n    const scriptlet = getScriptletByName(name);\n    if (!scriptlet) {\n        return false;\n    }\n    return true;\n}\n\n/**\n* Returns scriptlet code by param\n* @param {Source} source\n*/\nfunction getScriptletCode(source) {\n    if (!isValidScriptletName(source.name)) {\n        return null;\n    }\n\n    const scriptlet = getScriptletByName(source.name);\n    let result = attachDependencies(scriptlet);\n    result = addCall(scriptlet, result);\n    result = source.engine === 'corelibs'\n        ? wrapInNonameFunc(result)\n        : passSourceAndProps(source, result);\n    return result;\n}\n\n/**\n * Validates any scriptlet rule\n * @param {string} input - can be Adguard or Ubo or Abp scriptlet rule\n */\nexport function isValidScriptletRule(input) {\n    if (!input) {\n        return false;\n    }\n    // ABP 'input' rule may contain more than one snippet\n    const rulesArray = convertScriptletToAdg(input);\n\n    // checking if each of parsed scriptlets is valid\n    // if at least one of them is not valid - whole 'input' rule is not valid too\n    const isValid = rulesArray.reduce((acc, rule) => {\n        const parsedRule = parseRule(rule);\n        return isValidScriptletName(parsedRule.name) && acc;\n    }, true);\n\n    return isValid;\n}\n\n\n/**\n * Global scriptlet variable\n *\n * @returns {Object} object with methods:\n * `invoke` method receives one argument with `Source` type\n * `validate` method receives one argument with `String` type\n */\nconst scriptlets = {\n    invoke: getScriptletCode,\n    validateName: isValidScriptletName,\n    validateRule: isValidScriptletRule,\n    isAdgScriptletRule,\n    isUboScriptletRule,\n    isAbpSnippetRule,\n    convertUboToAdg: convertUboScriptletToAdg,\n    convertAbpToAdg: convertAbpSnippetToAdg,\n    convertScriptletToAdg,\n    convertAdgToUbo: convertAdgScriptletToUbo,\n};\n\nexport default scriptlets;\n"],"names":["getScriptletByName","name","scriptlets","Object","keys","scriptletsList","map","key","find","s","names","indexOf","isValidScriptletName","scriptlet","getScriptletCode","source","result","attachDependencies","addCall","engine","wrapInNonameFunc","passSourceAndProps","isValidScriptletRule","input","rulesArray","convertScriptletToAdg","isValid","reduce","acc","rule","parsedRule","parseRule","invoke","validateName","validateRule","isAdgScriptletRule","isUboScriptletRule","isAbpSnippetRule","convertUboToAdg","convertUboScriptletToAdg","convertAbpToAdg","convertAbpSnippetToAdg","convertAdgToUbo","convertAdgScriptletToUbo"],"mappings":";;;;;;;;;;AAwBA;;;;;;;;;;AAWA;;;;;AAIA,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYC,wBAAZ,EAA4BC,GAA5B,CAAgC,UAACC,GAAD;AAAA,WAASF,wBAAc,CAACE,GAAD,CAAvB;AAAA,GAAhC,CAAnB;AACA,SAAOL,UAAU,CACZM,IADE,CACG,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,KAAF,IAAWD,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBV,IAAhB,IAAwB,CAAC,CAA3C;AAAA,GADH,CAAP;AAEH;AAED;;;;;;AAIA,SAASW,oBAAT,CAA8BX,IAA9B,EAAoC;AAChC,MAAI,CAACA,IAAL,EAAW;AACP,WAAO,KAAP;AACH;;AACD,MAAMY,SAAS,GAAGb,kBAAkB,CAACC,IAAD,CAApC;;AACA,MAAI,CAACY,SAAL,EAAgB;AACZ,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;AAED;;;;;;AAIA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9B,MAAI,CAACH,oBAAoB,CAACG,MAAM,CAACd,IAAR,CAAzB,EAAwC;AACpC,WAAO,IAAP;AACH;;AAED,MAAMY,SAAS,GAAGb,kBAAkB,CAACe,MAAM,CAACd,IAAR,CAApC;AACA,MAAIe,MAAM,GAAGC,4BAAkB,CAACJ,SAAD,CAA/B;AACAG,EAAAA,MAAM,GAAGE,iBAAO,CAACL,SAAD,EAAYG,MAAZ,CAAhB;AACAA,EAAAA,MAAM,GAAGD,MAAM,CAACI,MAAP,KAAkB,UAAlB,GACHC,0BAAgB,CAACJ,MAAD,CADb,GAEHK,4BAAkB,CAACN,MAAD,EAASC,MAAT,CAFxB;AAGA,SAAOA,MAAP;AACH;AAED;;;;;;AAIO,SAASM,oBAAT,CAA8BC,KAA9B,EAAqC;AACxC,MAAI,CAACA,KAAL,EAAY;AACR,WAAO,KAAP;AACH,GAHuC;;;AAKxC,MAAMC,UAAU,GAAGC,+BAAqB,CAACF,KAAD,CAAxC,CALwC;AAQxC;;AACA,MAAMG,OAAO,GAAGF,UAAU,CAACG,MAAX,CAAkB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC7C,QAAMC,UAAU,GAAGC,mBAAS,CAACF,IAAD,CAA5B;AACA,WAAOjB,oBAAoB,CAACkB,UAAU,CAAC7B,IAAZ,CAApB,IAAyC2B,GAAhD;AACH,GAHe,EAGb,IAHa,CAAhB;AAKA,SAAOF,OAAP;AACH;AAGD;;;;;;;;AAOA,IAAMxB,UAAU,GAAG;AACf8B,EAAAA,MAAM,EAAElB,gBADO;AAEfmB,EAAAA,YAAY,EAAErB,oBAFC;AAGfsB,EAAAA,YAAY,EAAEZ,oBAHC;AAIfa,EAAAA,kBAAkB,EAAlBA,4BAJe;AAKfC,EAAAA,kBAAkB,EAAlBA,4BALe;AAMfC,EAAAA,gBAAgB,EAAhBA,0BANe;AAOfC,EAAAA,eAAe,EAAEC,kCAPF;AAQfC,EAAAA,eAAe,EAAEC,gCARF;AASfhB,EAAAA,qBAAqB,EAArBA,+BATe;AAUfiB,EAAAA,eAAe,EAAEC;AAVF,CAAnB;;;;;;;;;;;;;;;;;"}