- title: 1x1-transparent.gif
  comment: 'http://probablyprogramming.com/2009/03/15/the-tiniest-gif-ever'
  contentType: image/gif;base64
  content: R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==

- title: noopframe
  contentType: text/html
  content: |-
    <!DOCTYPE html>
    <html>
        <head><title></title></head>
        <body></body>
    </html>

- title: noopjs
  contentType: application/javascript
  content: '(function() {})()'

- title: nooptext
  contentType: text/plain
  content: ''

- title: noopmp3-0.1s
  comment: >
    From:
    https://ubuntuforums.org/showthread.php?t=1911430&p=11624471#post11624471
    ffmpeg -ar 48000 -t 0.1 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero
    -acodec libmp3lame -aq 4 output.mp3 But with 0.1 (second) instead of 60.
  contentType: audio/mp3;base64
  content: >
    SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAA
    AAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAADAABgYGBgYGBgYGBgYGBgYGBggICAgICA
    gICAgICAgICAgICgoKCgoKCgoKCgoKCgoKCgwMDAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODg4ODg4ODg
    4P////////////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAAwDNZKlY//sU
    ZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVV
    VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAA
    ACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    VVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVV
    VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgA
    AA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    VVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVV
    VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sU
    ZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

- title: 2x2-transparent.png
  contentType: image/png;base64
  content: >
    iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAC0lEQVQI12NgQAcAABIAAe+JVKQAAAAA
    SUVORK5CYII=

- title: 3x2-transparent.png
  contentType: image/png;base64
  content: >
    iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAYAAACddGYaAAAAC0lEQVQI12NgwAUAABoAASRETuUAAAAA
    SUVORK5CYII=

- title: log-addEventListener
  comment: Logs add event listener calls
  aliases:
    - addEventListener-logger.js
  contentType: application/javascript
  content: |-
    (function(source, args){
    function logAddEventListener(source) {
        var log = console.log.bind(console);
        var nativeAddEventListener = window.EventTarget.prototype.addEventListener;

        function addEventListenerWrapper(eventName, callback) {
          hit(source);
          log("addEventListener(\"".concat(eventName, "\", ").concat(callback.toString(), ")"));

          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }

          return nativeAddEventListener.apply(this, [eventName, callback].concat(args));
        }

        window.EventTarget.prototype.addEventListener = addEventListenerWrapper;
      }
    function hit(source, message) {
        if (source.verbose !== true) {
          return;
        }

        var log = console.log.bind(console);
        var trace = console.trace.bind(console);

        if (message) {
          log("".concat(source.ruleText, " message:\n").concat(message));
        }

        log("".concat(source.ruleText, " trace start"));

        if (trace) {
          trace();
        }

        log("".concat(source.ruleText, " trace end")); // This is necessary for unit-tests only!

        if (typeof window.__debugScriptlets === 'function') {
          window.__debugScriptlets(source);
        }
      };
            const updatedArgs = args ? [].concat(source).concat(args) : [source];
            logAddEventListener.apply(this, updatedArgs);
        
    })({"name":"log-addEventListener"});

- title: log-setInterval
  comment: Logs setInterval calls
  aliases:
    - setInterval-logger.js
  contentType: application/javascript
  content: |-
    (function(source, args){
    function logSetInterval(source) {
        var log = console.log.bind(console);
        var nativeSetInterval = window.setInterval;

        function setIntervalWrapper(callback, timeout) {
          hit(source);
          log("setInterval(\"".concat(callback.toString(), "\", ").concat(timeout, ")"));

          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }

          return nativeSetInterval.apply(window, [callback, timeout].concat(args));
        }

        window.setInterval = setIntervalWrapper;
      }
    function hit(source, message) {
        if (source.verbose !== true) {
          return;
        }

        var log = console.log.bind(console);
        var trace = console.trace.bind(console);

        if (message) {
          log("".concat(source.ruleText, " message:\n").concat(message));
        }

        log("".concat(source.ruleText, " trace start"));

        if (trace) {
          trace();
        }

        log("".concat(source.ruleText, " trace end")); // This is necessary for unit-tests only!

        if (typeof window.__debugScriptlets === 'function') {
          window.__debugScriptlets(source);
        }
      };
            const updatedArgs = args ? [].concat(source).concat(args) : [source];
            logSetInterval.apply(this, updatedArgs);
        
    })({"name":"log-setInterval"});

- title: prevent-fab-3.2.0
  comment: Fuckadblock 3.2.0 defuser
  aliases:
    - fuckadblock.js-3.2.0
  contentType: application/javascript
  content: |-
    (function(source, args){
    function preventFab(source) {
        hit(source);

        var Fab = function Fab() {};

        Fab.prototype.check = noop;
        Fab.prototype.clearEvent = noop;
        Fab.prototype.emitEvent = noop;

        Fab.prototype.on = function (a, b) {
          if (!a) {
            b();
          }

          return this;
        };

        Fab.prototype.onDetected = function () {
          return this;
        };

        Fab.prototype.onNotDetected = function (a) {
          a();
          return this;
        };

        Fab.prototype.setOption = noop;
        window.FuckAdBlock = window.BlockAdBlock = Fab; //

        window.fuckAdBlock = window.blockAdBlock = new Fab();
      }
    function noop() {}
    function hit(source, message) {
        if (source.verbose !== true) {
          return;
        }

        var log = console.log.bind(console);
        var trace = console.trace.bind(console);

        if (message) {
          log("".concat(source.ruleText, " message:\n").concat(message));
        }

        log("".concat(source.ruleText, " trace start"));

        if (trace) {
          trace();
        }

        log("".concat(source.ruleText, " trace end")); // This is necessary for unit-tests only!

        if (typeof window.__debugScriptlets === 'function') {
          window.__debugScriptlets(source);
        }
      };
            const updatedArgs = args ? [].concat(source).concat(args) : [source];
            preventFab.apply(this, updatedArgs);
        
    })({"name":"prevent-fab-3.2.0"});
